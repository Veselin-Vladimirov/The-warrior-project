#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h> // Include ArduinoJson library

const char* ssid = "TP-Link_D9";
const char* password = "12345678";
const char* serverAddress = "http://52.59.240.129/records";
const char* apSSID = "ESP32_AP";
const char* apPassword = "password";
const int apChannel = 1;

WiFiServer server(80); // Port 80 is commonly used for HTTP
#define BME_SDA 2
#define BME_SCL 15
#define ANEMOMETER_PIN 32

Adafruit_BME280 bme;
long previousMillis = 0;
const long interval = 1000;
float depth, waterTemperature, clearness;
String location = "kiten-atliman";

void setup() {
    // Set ESP32 Dev Kit as an Access Point
  WiFi.softAP(apSSID, apPassword, apChannel);
  Serial.println("Access Point started.");

  // Print ESP32 Dev Kit IP address
  Serial.print("AP IP address: ");
  Serial.println(WiFi.softAPIP());

  // Start the server
  server.begin();
  Serial.println("Server started.");

  Serial.begin(115200);
  /*
  Wire.begin(BME_SDA, BME_SCL);
  if (!bme.begin(0x76, &Wire)) {
    Serial.println("Could not find a valid BME280 sensor, check wiring!");
    while (1);
  }
  */
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

void loop() {
  long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    WiFiClient client = server.available();
    if (client) {
      Serial.println("New client connected.");
      while (client.connected()) {
        if (client.available()) {
          String data = client.readStringUntil('\n');
          Serial.println("Data received from client: " + data);

          // Split the received string by the delimiter ";"
          String values[3];
          int index = 0;
          int lastIndex = 0;
          for (int i = 0; i < data.length(); i++) {
            if (data.charAt(i) == ';') {
              values[index] = data.substring(lastIndex, i);
              lastIndex = i + 1;
              index++;
            }
          }
          // Handle the last value
          values[index] = data.substring(lastIndex);

          // Convert and print the extracted values
          depth = values[0].toFloat();
          waterTemperature = values[1].toFloat();
          clearness = values[2].toFloat();

          Serial.println("Depth: " + String(depth) + " m");
          Serial.println("Temperature: " + String(waterTemperature) + " Â°C");
          Serial.println("clearness: " + String(clearness));

          // You can now use these values for further processing or actions.
        }
      }
    }
    // Read the anemometer voltage
    int sensorValue = analogRead(ANEMOMETER_PIN);
    float voltage = sensorValue * (5.0 / 4095.0); // Convert analog value to voltage

    // Calculate wind speed
    float windSpeed = calculateWindSpeed(voltage);

    // Read BME280 sensor
    float airTemperature = 24; //bme.readTemperature();
    float pressure = 954; // bme.readPressure() / 100.0F; // hPa conversion
    float humidity = 67; // bme.readHumidity();
    Serial.println("temp: ");
    Serial.print(airTemperature);
    Serial.println("press: ");
    Serial.print(pressure);
    Serial.println("hum: ");
    Serial.print(humidity);
    Serial.println("wind: ");
    Serial.print(windSpeed);
    // Create JSON payload
    StaticJsonDocument<500> jsonDocument;
    jsonDocument["location"] = location;
    jsonDocument["depth"] = depth;
    jsonDocument["air_temperature"] = airTemperature;
    jsonDocument["water_temperature"] = waterTemperature;
    jsonDocument["clearness"] = clearness;
    jsonDocument["pressure"] = pressure;
    jsonDocument["humidity"] = humidity;
    jsonDocument["wind_speed"] = windSpeed;

    String dataToSend;
    serializeJson(jsonDocument, dataToSend);
    Serial.println(dataToSend);
    // Send data to server
    HTTPClient http;
    http.begin(serverAddress);  
    http.addHeader("Content-Type", "application/json");
    int httpResponseCode = http.POST(dataToSend);

    if (httpResponseCode > 0) {
        Serial.print("Data sent successfully. Response code: ");
        Serial.println(httpResponseCode);
    } else {
        Serial.print("Failed to send data. Error code: ");
        Serial.println(httpResponseCode);
    }

    http.end();
  }

  delay(10000); // Adjust delay based on your requirements
}

float calculateWindSpeed(float voltage) {
  // Calibration parameters
  float voltageAtZeroWind = 0.0; // Voltage output at zero wind speed
  float voltageAtMaxWind = 5.0;  // Voltage output at maximum wind speed
  float maxWindSpeed = 45.0;     // Maximum wind speed in m/s

  // Calculate the slope (change in wind speed per unit change in voltage)
  float slope = maxWindSpeed / (voltageAtMaxWind - voltageAtZeroWind);

  // Calculate the wind speed using linear interpolation
  float windSpeed = slope * (voltage - voltageAtZeroWind);

  // Ensure wind speed is within the valid range
  windSpeed = constrain(windSpeed, 0, maxWindSpeed);

  return windSpeed;
}
